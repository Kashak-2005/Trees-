// Class representing a node in the BST
class Node {
    int key;
    Node left, right;

    public Node(int item) {
        key = item;
        left = right = null;
    }
}

// Class for the BST
class BinarySearchTree {
    Node root;

    // Constructor
    BinarySearchTree() {
        root = null;
    }

    // Method to delete a key
    void delete(int key) {
        root = deleteRec(root, key);
    }

    // Recursive method to delete a key
    Node deleteRec(Node root, int key) {
        // Base case: If the tree is empty
        if (root == null) {
            return root;
        }

        // Traverse the tree to find the node to delete
        if (key < root.key) {
            root.left = deleteRec(root.left, key);
        } else if (key > root.key) {
            root.right = deleteRec(root.right, key);
        } else {
            // Node to be deleted found

            // Case 1: Node has no child (leaf node)
            if (root.left == null && root.right == null) {
                return null;
            }

            // Case 2: Node has only one child
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }

            // Case 3: Node has two children
            // Get the in-order successor (smallest in the right subtree)
            root.key = minValue(root.right);

            // Delete the in-order successor
            root.right = deleteRec(root.right, root.key);
        }

        return root;
    }

    // Method to find the smallest value in a subtree
    int minValue(Node root) {
        int minValue = root.key;
        while (root.left != null) {
            root = root.left;
            minValue = root.key;
        }
        return minValue;
    }

    // Method for in-order traversal
    void inorder() {
        inorderRec(root);
    }

    // Recursive method for in-order traversal
    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " ");
            inorderRec(root.right);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();

        // Insert keys
        bst.insert(50);
        bst.insert(30);
        bst.insert(70);
        bst.insert(20);
        bst.insert(40);
        bst.insert(60);
        bst.insert(80);

        // Print in-order traversal before deletion
        System.out.println("In-order traversal before deletion:");
        bst.inorder();

        // Delete a key
        System.out.println("\n\nDeleting 20...");
        bst.delete(20);
        System.out.println("In-order traversal after deleting 20:");
        bst.inorder();

        System.out.println("\n\nDeleting 30...");
        bst.delete(30);
        System.out.println("In-order traversal after deleting 30:");
        bst.inorder();

        System.out.println("\n\nDeleting 50...");
        bst.delete(50);
        System.out.println("In-order traversal after deleting 50:");
        bst.inorder();
    }
}

