// Class representing a node in the BST
class Node {
    int key;
    Node left, right;

    public Node(int item) {
        key = item;
        left = right = null;
    }
}

// Class for the BST
class BinarySearchTree {
    Node root;

    // Constructor
    BinarySearchTree() {
        root = null;
    }

    // Method to insert a new key
    void insert(int key) {
        root = insertRec(root, key);
    }

    // Recursive method to insert a key into the subtree
    Node insertRec(Node root, int key) {
        // Base case: If the tree is empty, create a new node
        if (root == null) {
            root = new Node(key);
            return root;
        }

        // Recur down the tree
        if (key < root.key) {
            root.left = insertRec(root.left, key);
        } else if (key > root.key) {
            root.right = insertRec(root.right, key);
        }

        // Return the unchanged root node
        return root;
    }

    // Method to search for a key in the BST
    boolean search(int key) {
        return searchRec(root, key);
    }

    // Recursive method to search for a key
    boolean searchRec(Node root, int key) {
        // Base case: root is null or the key is present at root
        if (root == null) {
            return false;
        }
        if (root.key == key) {
            return true;
        }

        // Key is smaller than root's key, search in the left subtree
        if (key < root.key) {
            return searchRec(root.left, key);
        }

        // Key is larger than root's key, search in the right subtree
        return searchRec(root.right, key);
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();

        // Insert keys
        bst.insert(50);
        bst.insert(30);
        bst.insert(70);
        bst.insert(20);
        bst.insert(40);
        bst.insert(60);
        bst.insert(80);

        // Search for keys
        int keyToSearch = 40;
        System.out.println("Searching for " + keyToSearch + ": " + bst.search(keyToSearch));

        keyToSearch = 90;
        System.out.println("Searching for " + keyToSearch + ": " + bst.search(keyToSearch));
    }
}

